<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Premium DASH Video Player</title>
    <!-- DASH.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dashjs/4.5.2/dash.all.min.js"></script>
    <!-- Font Awesome for icons -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js"></script>
    <style>
        :root {
            --primary-color: #2a4494;
            --secondary-color: #4ea5d9;
            --accent-color: #44cfcb;
            --dark-color: #1e1e2e;
            --light-color: #f8f9fa;
            --gradient: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: var(--dark-color);
            color: var(--light-color);
            min-height: 100vh;
        }

        header {
            background: var(--gradient);
            padding: 1.5rem;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            position: relative;
            overflow: hidden;
        }

        header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: radial-gradient(circle at 70% 30%, rgba(255, 255, 255, 0.2) 0%, transparent 70%);
            pointer-events: none;
        }

        h1 {
            font-size: 2.5rem;
            font-weight: 700;
            text-align: center;
            margin: 0.5rem 0;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }

        .subtitle {
            text-align: center;
            opacity: 0.8;
            font-size: 1.1rem;
            margin-bottom: 0.5rem;
        }

        .container {
            max-width: 1000px;
            margin: 0 auto;
            padding: 1.5rem;
        }

        .player-container {
            display: flex;
            flex-direction: column;
            background-color: rgba(30, 30, 46, 0.9);
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
            margin-bottom: 2rem;
            position: relative;
        }

        .video-wrapper {
            position: relative;
            width: 100%;
            background-color: #000;
            aspect-ratio: 16/9;
            overflow: hidden;
        }

        video {
            width: 100%;
            height: 100%;
            object-fit: contain;
            background-color: #000;
        }

        .controls-panel {
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
            gap: 1rem;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
        }

        .stream-info {
            display: flex;
            flex-wrap: wrap;
            gap: 1.5rem;
            margin-bottom: 1rem;
        }

        .info-card {
            flex: 1;
            min-width: 200px;
            background-color: rgba(255, 255, 255, 0.05);
            padding: 1rem;
            border-radius: 8px;
            display: flex;
            flex-direction: column;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .info-card h3 {
            font-size: 0.9rem;
            opacity: 0.7;
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .info-card .value {
            font-size: 1.5rem;
            font-weight: 600;
        }

        .info-card .unit {
            font-size: 0.9rem;
            opacity: 0.7;
            margin-left: 0.25rem;
        }

        .url-input-container {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 1.5rem;
        }

        .url-input {
            flex: 1;
            padding: 1rem;
            border-radius: 8px;
            border: 2px solid rgba(255, 255, 255, 0.1);
            background-color: rgba(255, 255, 255, 0.05);
            color: var(--light-color);
            font-size: 1rem;
            transition: all 0.2s ease;
        }

        .url-input:focus {
            outline: none;
            border-color: var(--accent-color);
            box-shadow: 0 0 0 2px rgba(68, 207, 203, 0.3);
        }

        .load-btn {
            padding: 1rem 1.5rem;
            background: var(--accent-color);
            color: var(--dark-color);
            border: none;
            border-radius: 8px;
            font-weight: 600;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .load-btn:hover {
            background-color: #5edbca;
            transform: translateY(-2px);
        }

        .load-btn:active {
            transform: translateY(0);
        }

        .settings-group {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            margin-top: 1.5rem;
        }

        .settings-card {
            flex: 1;
            min-width: 250px;
            background-color: rgba(255, 255, 255, 0.05);
            border-radius: 12px;
            padding: 1.5rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .settings-card h3 {
            font-size: 1.2rem;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .setting-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .setting-label {
            font-size: 1rem;
        }

        .setting-control {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        select, input[type="number"] {
            background-color: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: var(--light-color);
            padding: 0.5rem;
            border-radius: 6px;
        }

        select:focus, input[type="number"]:focus {
            outline: none;
            border-color: var(--accent-color);
        }

        .switch {
            position: relative;
            display: inline-block;
            width: 50px;
            height: 24px;
        }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(255, 255, 255, 0.2);
            transition: .4s;
            border-radius: 34px;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 18px;
            width: 18px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

        input:checked + .slider {
            background-color: var(--accent-color);
        }

        input:checked + .slider:before {
            transform: translateX(26px);
        }

        .loading-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.7);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 10;
            backdrop-filter: blur(5px);
        }

        .spinner {
            width: 50px;
            height: 50px;
            border: 5px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: var(--accent-color);
            animation: spin 1s ease-in-out infinite;
            margin-bottom: 1rem;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .loading-text {
            font-size: 1.2rem;
            font-weight: 500;
        }

        .quality-badge {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background-color: var(--primary-color);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            z-index: 5;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        }

        .error-message {
            background-color: rgba(220, 53, 69, 0.1);
            border: 1px solid rgba(220, 53, 69, 0.3);
            color: #ff6b6b;
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            display: none;
        }
    </style>
</head>
<body>
    <header>
        <h1>Premium DASH Video Player</h1>
        <p class="subtitle">Adaptive streaming with real-time analytics</p>
    </header>

    <div class="container">
        <div class="url-input-container">
            <input type="text" id="videoUrl" class="url-input" placeholder="Enter MPD URL or select from examples"
                   value="https://dash.akamaized.net/akamai/bbb_30fps/bbb_30fps.mpd">
            <button id="loadBtn" class="load-btn">
                <i class="fas fa-play"></i> Load Stream
            </button>
        </div>

        <div id="errorMessage" class="error-message">
            <i class="fas fa-exclamation-circle"></i> <span id="errorText"></span>
        </div>

        <div class="player-container">
            <div id="loadingOverlay" class="loading-overlay">
                <div class="spinner"></div>
                <div class="loading-text">Loading stream...</div>
            </div>

            <div class="quality-badge" id="qualityBadge">
                <i class="fas fa-signal"></i> <span id="currentQuality">Auto</span>
            </div>

            <div class="video-wrapper">
                <video id="videoPlayer" controls></video>
            </div>

            <div class="controls-panel">
                <div class="stream-info">
                    <div class="info-card">
                        <h3><i class="fas fa-tachometer-alt"></i> Current Bitrate</h3>
                        <div><span id="currentBitrate" class="value">0</span><span class="unit">kbps</span></div>
                    </div>
                    <div class="info-card">
                        <h3><i class="fas fa-memory"></i> Buffer Level</h3>
                        <div><span id="bufferLevel" class="value">0</span><span class="unit">s</span></div>
                    </div>
                    <div class="info-card">
                        <h3><i class="fas fa-film"></i> Resolution</h3>
                        <div><span id="videoResolution" class="value">0x0</span></div>
                    </div>
                    <div class="info-card">
                        <h3><i class="fas fa-network-wired"></i> Bandwidth</h3>
                        <div><span id="estimatedBandwidth" class="value">0</span><span class="unit">kbps</span></div>
                    </div>
                </div>

                <div class="settings-group">
                    <div class="settings-card">
                        <h3><i class="fas fa-sliders-h"></i> Playback Settings</h3>
                        <div class="setting-item">
                            <div class="setting-label">ABR Strategy</div>
                            <div class="setting-control">
                                <select id="abrStrategy">
                                    <option value="abrDynamic">Dynamic (Default)</option>
                                    <option value="abrBola">BOLA</option>
                                    <option value="abrThroughput">Throughput</option>
                                </select>
                            </div>
                        </div>
                        <div class="setting-item">
                            <div class="setting-label">Fast Switching</div>
                            <div class="setting-control">
                                <label class="switch">
                                    <input type="checkbox" id="fastSwitchEnabled" checked>
                                    <span class="slider"></span>
                                </label>
                            </div>
                        </div>
                        <div class="setting-item">
                            <div class="setting-label">Initial Bitrate</div>
                            <div class="setting-control">
                                <input type="number" id="initialBitrate" min="100" max="10000" step="100" value="2000">
                                <span>kbps</span>
                            </div>
                        </div>
                    </div>
                    <div class="settings-card">
                        <h3><i class="fas fa-cog"></i> Buffer Settings</h3>
                        <div class="setting-item">
                            <div class="setting-label">Stable Buffer Time</div>
                            <div class="setting-control">
                                <input type="number" id="stableBufferTime" min="1" max="60" value="20">
                                <span>s</span>
                            </div>
                        </div>
                        <div class="setting-item">
                            <div class="setting-label">Buffer Pruning</div>
                            <div class="setting-control">
                                <label class="switch">
                                    <input type="checkbox" id="bufferPruningEnabled" checked>
                                    <span class="slider"></span>
                                </label>
                            </div>
                        </div>
                        <div class="setting-item">
                            <div class="setting-label">Live Delay</div>
                            <div class="setting-control">
                                <input type="number" id="liveDelay" min="0" max="30" value="3">
                                <span>s</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

   <script>
    // DOM Elements
    const videoPlayer = document.getElementById('videoPlayer');
    const videoUrl = document.getElementById('videoUrl');
    const loadBtn = document.getElementById('loadBtn');
    const loadingOverlay = document.getElementById('loadingOverlay');
    const errorMessage = document.getElementById('errorMessage');
    const errorText = document.getElementById('errorText');
    const currentBitrate = document.getElementById('currentBitrate');
    const bufferLevel = document.getElementById('bufferLevel');
    const videoResolution = document.getElementById('videoResolution');
    const estimatedBandwidth = document.getElementById('estimatedBandwidth');
    const qualityBadge = document.getElementById('qualityBadge');
    const currentQuality = document.getElementById('currentQuality');

    // Settings elements
    const abrStrategy = document.getElementById('abrStrategy');
    const fastSwitchEnabled = document.getElementById('fastSwitchEnabled');
    const initialBitrate = document.getElementById('initialBitrate');
    const stableBufferTime = document.getElementById('stableBufferTime');
    const bufferPruningEnabled = document.getElementById('bufferPruningEnabled');
    const liveDelay = document.getElementById('liveDelay');

    let player = null;
    let startTime = 0;

    // Function to initialize or reload the DASH.js player
    function initPlayer(url) {
        // Show loading overlay
        loadingOverlay.style.display = 'flex';
        errorMessage.style.display = 'none';

        // Destroy existing player if it exists
        if (player) {
            player.destroy();
        }

        try {
            // Create new player
            player = dashjs.MediaPlayer().create();

            // Apply settings
            player.updateSettings({
                'streaming': {
                    'abr': {
                        'ABRStrategy': abrStrategy.value,
                        'fastSwitchEnabled': fastSwitchEnabled.checked,
                        'initialBitrate': { 'video': parseInt(initialBitrate.value) }
                    },
                    'buffer': {
                        'stableBufferTime': parseInt(stableBufferTime.value),
                        'bufferPruningEnabled': bufferPruningEnabled.checked
                    },
                    'delay': {
                        'liveDelay': parseInt(liveDelay.value)
                    }
                }
            });

            // Initialize player with video element and stream URL
            player.initialize(videoPlayer, url, true);

            // Reset time tracking
            startTime = Date.now();

            // Monitor buffer level
            player.on(dashjs.MediaPlayer.events.BUFFER_LEVEL_UPDATED, function(e) {
                const bufferLevelValue = e.bufferLevel.toFixed(2);
                bufferLevel.textContent = bufferLevelValue;
            });

            // Monitor video quality changes
            player.on(dashjs.MediaPlayer.events.QUALITY_CHANGE_RENDERED, function(e) {
                if (e.mediaType === 'video') {
                    // Get bitrate information
                    const bitrateInfo = player.getBitrateInfoListFor('video')[e.newQuality];
                    if (bitrateInfo) {
                        const bitrateKbps = Math.round(bitrateInfo.bitrate / 1000);
                        const width = bitrateInfo.width || 0;
                        const height = bitrateInfo.height || 0;

                        // Update UI
                        currentBitrate.textContent = bitrateKbps;
                        videoResolution.textContent = `${width}x${height}`;

                        if (e.newQuality === 0) {
                            currentQuality.textContent = 'Low';
                            qualityBadge.style.backgroundColor = '#dc3545';
                        } else if (e.newQuality === player.getBitrateInfoListFor('video').length - 1) {
                            currentQuality.textContent = 'High';
                            qualityBadge.style.backgroundColor = '#2a4494';
                        } else {
                            currentQuality.textContent = 'Medium';
                            qualityBadge.style.backgroundColor = '#4ea5d9';
                        }
                    }
                }
            });

            // Monitor estimated bandwidth
            player.on(dashjs.MediaPlayer.events.QUALITY_CHANGE_REQUESTED, function() {
                const bandwidthKbps = Math.round(player.getAverageThroughput('video') / 1000);
                estimatedBandwidth.textContent = bandwidthKbps;
            });

            // Hide loading overlay when playback starts
            player.on(dashjs.MediaPlayer.events.PLAYBACK_STARTED, function() {
                loadingOverlay.style.display = 'none';
            });

            // Handle errors
            player.on(dashjs.MediaPlayer.events.ERROR, function(e) {
                showError(`Playback error: ${e.error ? e.error.message : 'Unknown error'}`);
            });
        } catch (error) {
            showError(`Failed to initialize player: ${error.message}`);
        }
    }

    // Function to show error message
    function showError(message) {
        loadingOverlay.style.display = 'none';
        errorMessage.style.display = 'block';
        errorText.textContent = message;
    }

    // Event listeners
    loadBtn.addEventListener('click', function() {
        const url = videoUrl.value.trim();
        if (url) {
            initPlayer(url);
        } else {
            showError('Please enter a valid MPD URL');
        }
    });

    // Settings change listeners
    abrStrategy.addEventListener('change', function() {
        if (player) {
            player.updateSettings({
                'streaming': {
                    'abr': {
                        'ABRStrategy': abrStrategy.value
                    }
                }
            });
        }
    });

    fastSwitchEnabled.addEventListener('change', function() {
        if (player) {
            player.updateSettings({
                'streaming': {
                    'abr': {
                        'fastSwitchEnabled': fastSwitchEnabled.checked
                    }
                }
            });
        }
    });

    initialBitrate.addEventListener('change', function() {
        if (player) {
            player.updateSettings({
                'streaming': {
                    'abr': {
                        'initialBitrate': { 'video': parseInt(initialBitrate.value) }
                    }
                }
            });
        }
    });

    stableBufferTime.addEventListener('change', function() {
        if (player) {
            player.updateSettings({
                'streaming': {
                    'buffer': {
                        'stableBufferTime': parseInt(stableBufferTime.value)
                    }
                }
            });
        }
    });

    bufferPruningEnabled.addEventListener('change', function() {
        if (player) {
            player.updateSettings({
                'streaming': {
                    'buffer': {
                        'bufferPruningEnabled': bufferPruningEnabled.checked
                    }
                }
            });
        }
    });

    liveDelay.addEventListener('change', function() {
        if (player) {
            player.updateSettings({
                'streaming': {
                    'delay': {
                        'liveDelay': parseInt(liveDelay.value)
                    }
                }
            });
        }
    });

    // Sample MPD files for testing
    const sampleMPDs = [
        'https://dash.akamaized.net/akamai/bbb_30fps/bbb_30fps.mpd',
        'https://dash.akamaized.net/envivio/EnvivioDash3/manifest.mpd',
        'https://dash.akamaized.net/digitalprimates/tears/tears_of_steel_1080p.mpd'
    ];

    // Add handler for player errors
    videoPlayer.addEventListener('error', function() {
        showError(`Media error: ${videoPlayer.error ? videoPlayer.error.message : 'Unknown media error'}`);
    });

    // Initialize player with default URL on page load
    initPlayer(videoUrl.value);
</script>
</body>
</html>